{"version":3,"sources":["assets/scripte/branchmag1.js","assets/scripte/branchmag2.js","assets/scripte/branch.js","assets/scripte/data.js","assets/scripte/lead.js","assets/scripte/play.js","assets/scripte/ranking.js","assets/scripte/tensApi.js"],"names":["cc","Class","extends","Component","properties","branchpreL","default","type","Prefab","branchpreR","onLoad","this","poolL","NodePool","poolR","i","put","instantiate","start","schedule","node","parent","getComponent","isGameOver","size","createBranch","update","dt","offTouch","touchStar","init","pool","num","find","score","y","height","getChildByName","Label","string","parseInt","module","exports","data","userInfo","page","onCollisionEnter","other","self","countDown","speed","x","width","api","require","ranking","ZMIM","request","then","res","console","log","state","config","showTips","catch","err","window","location","replace","ready","getLocalUserInfo","showJOJOAlert","director","getCollisionManager","enabled","getUserInfo","undefined","lpsNoApp","active","Math","floor","random","winSize","newBranch","get","collider","BoxCollider","offset","v2","childrenCount","children","zIndex","addChild","lead","on","off","time","timmer","setInterval","clearInterval","gameover","keepOn","gameResurrection","code","gameResetResurrection","showShareAlert","gameStart","saveGameScore","openRank","closeRank","req","title","Node","content","rowPre","showType","rowPool","newRow","updateList","recycle","removeAllChildren","destroyAllChildren","color","Color","RED","WHITE","getList","creatRow","rank","name","updataMy","_this","count","getCharts","getWorldRanking","addRankingOnly","getTeamRanking","getFriendRanking","list","length","user","ScrollView","scrollToTop","my","row","_this2","addRanking","onEnable","onDisable","closeNode","a","b","define","amd","cmd","w","flag","callhandler","asdf","callback","DAWebViewJavascriptBridge","callHandler","tabel","options","Promise","resolve","reject","message","responseCallback","Javascript Responds","document","addEventListener","error","url","method","dataJson","id","currentScreenState","zmim"],"mappings":"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","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n    properties: {\r\n        branchpreL: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        branchpreR: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n    },\r\n    onLoad() {\r\n        this.poolL = new cc.NodePool('branch');\r\n        this.poolR = new cc.NodePool('branch');\r\n        for (let i = 0; i < 100; i++) {\r\n            this.poolL.put(cc.instantiate(this.branchpreL));\r\n            this.poolR.put(cc.instantiate(this.branchpreR));\r\n        }\r\n    },\r\n    start() {\r\n        this.schedule(function(){\r\n            if (!this.node.parent.getComponent('play').isGameOver&&this.poolL.size()>0&&this.poolR.size()>0) {\r\n                this.node.parent.getComponent('play').createBranch(this.node, this.poolL, this.poolR)\r\n            }    \r\n        },0.5)\r\n    },\r\n    update(dt) {\r\n        if (this.node.parent.getComponent('play').isGameOver) {\r\n            this.node.parent.getComponent('play').offTouch(this.node)\r\n        }\r\n        if (!this.node.parent.getComponent('play').isGameOver) {\r\n            this.node.parent.getComponent('play').touchStar(this.node)\r\n        }\r\n    },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n    properties: {\r\n        branchpreL: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        branchpreR: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n    },\r\n    onLoad() {\r\n        this.poolL = new cc.NodePool('branch');\r\n        this.poolR = new cc.NodePool('branch');\r\n        for (let i = 0; i < 100; i++) {\r\n            this.poolL.put(cc.instantiate(this.branchpreL));\r\n            this.poolR.put(cc.instantiate(this.branchpreR));\r\n        }\r\n    },\r\n\r\n    start() {\r\n        this.schedule(function () {\r\n            if (!this.node.parent.getComponent('play').isGameOver && this.poolL.size() > 0 && this.poolR.size() > 0) {\r\n                this.node.parent.getComponent('play').createBranch(this.node, this.poolL, this.poolR)\r\n            }\r\n        }, 0.5)\r\n    },\r\n    update(dt) {\r\n        if (this.node.parent.getComponent('play').isGameOver) {\r\n            this.node.parent.getComponent('play').offTouch(this.node)\r\n        }\r\n        if (!this.node.parent.getComponent('play').isGameOver) {\r\n            this.node.parent.getComponent('play').touchStar(this.node)\r\n        }\r\n    },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n    properties: {\r\n    },\r\n    onLoad() {},\r\n    init(pool) {\r\n        this.pool = pool;\r\n    },\r\n    start() {},\r\n    update(dt) {\r\n        let num = cc.find('Canvas').getComponent('play').score / 10 > 10 ? 10 : cc.find('Canvas').getComponent('play').score / 10;\r\n   \r\n        if (this.node.y < -this.node.height || cc.find('Canvas').getComponent('play').isGameOver){\r\n            if (!cc.find('Canvas').getComponent('play').isGameOver) {\r\n                    cc.find('Canvas').getComponent('play').score += 0.5;\r\n                    cc.find('Canvas').getChildByName('score').getComponent(cc.Label).string = parseInt(cc.find('Canvas').getComponent('play').score);\r\n            }\r\n            this.pool.put(this.node);\r\n        }\r\n        this.node.y -= 5 + num;\r\n    },\r\n});\r\n","// http://192.168.199.195:3001/game?type=biyishuangfei&cljljl=rrt&wydtt=game&gameId=5d493cb3c6c5ee0001b1a7d3\r\nvar a = {\r\n    data: {\r\n        userInfo:null,\r\n        page: 1,\r\n    }\r\n}\r\nmodule.exports = a","// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n    /**\r\n        * 进入碰撞\r\n        * 当碰撞产生的时候调用\r\n        * @param {collider} other 产生碰撞的另一个组件\r\n        * @param {collider} self 产生碰撞的当前组件\r\n        */\r\n    onCollisionEnter: function (other, self) {\r\n        // cc.log('me', self, 'other', other);\r\n        cc.find('Canvas').getComponent('play').countDown();\r\n        // 碰撞系统会计算出碰撞组件在世界坐标系下的相关的值，并放到 world 这个属性里面\r\n        // var world = self.world;\r\n        // this.game.isGameover = true;\r\n        // this.game.node.off('touchstart');\r\n        // this.game.node.off('touchend');\r\n        // this.game.pop.active = true;\r\n        // this.game.pop.zIndex = 3;\r\n    },\r\n    onLoad() {\r\n        this.speed = -1;\r\n    },\r\n\r\n    start() {\r\n    },\r\n    update(dt) {\r\n        if (this.node.x >= 0 && this.node.x <= this.node.parent.width - this.node.width) {\r\n            this.node.x += (10 + cc.find('Canvas').getComponent('play').score) * this.speed\r\n        }\r\n        if (this.node.x < 0) {\r\n            this.node.x = 0;\r\n        }\r\n        if (this.node.x > this.node.parent.width - this.node.width) {\r\n            this.node.x = this.node.parent.width - this.node.width;\r\n        }\r\n        if (cc.find('Canvas').getComponent('play').isGameOver) {\r\n            this.node.x = 0;\r\n            this.speed = -1;\r\n        }\r\n    },\r\n});\r\n","var api = require('./data.js');\r\ncc.Class({\r\n    extends: cc.Component,\r\n    properties: {\r\n        ranking: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n    },\r\n    onLoad() {\r\n        //loading client android sdk\r\n        let self = this\r\n        ZMIM.request('/login').then((res) => {\r\n            console.log('login', res)\r\n            if (res.state == 0) {\r\n                ZMIM.config(res.data).then((config) => {\r\n                    ZMIM.showTips('config');\r\n                }).catch(err => {\r\n                    window.location.replace(\"https://dev.imapi.zhenmanapp.com/static/html/ivcode.html?code=#/\")\r\n                })\r\n            } else {\r\n                ZMIM.showTips('请检查您的网络');\r\n            }\r\n        }).catch(() => {\r\n            window.location.replace(\"https://dev.imapi.zhenmanapp.com/static/html/ivcode.html?code=#/\")\r\n        })\r\n        ZMIM.ready(() => {\r\n            self.getLocalUserInfo()\r\n            ZMIM.showJOJOAlert('ready 页面初始化成功').then((res) => {\r\n                console.log('点接确定', res)\r\n            })\r\n        })\r\n        this.isGameOver = true;\r\n        cc.director.getCollisionManager().enabled = true;\r\n    },\r\n    getLocalUserInfo() {\r\n        let self = this\r\n        ZMIM.getUserInfo().then((res) => {\r\n            if (res.lpsNoApp != undefined) {\r\n                self.node.getChildByName('WebView').active = true;\r\n            } else {\r\n                api.data.userInfo = res;\r\n            }\r\n        })\r\n    },\r\n    /**\r\n     * begin creat tree branch\r\n     * @param {*} node region node\r\n     * @param {*} poolL left object pool\r\n     * @param {*} poolR right object pool\r\n     */\r\n    createBranch(node, poolL, poolR) {\r\n        //i 0:left 1:right\r\n        let i = Math.floor(Math.random() * 2);\r\n        let width = 50 + Math.floor(Math.random() * (cc.winSize.width / 2 - 50));\r\n        let newBranch = null;\r\n        let x = 0;\r\n        if (i == 1) {\r\n            newBranch = poolR.get();\r\n            newBranch.getComponent('branch').init(poolR);\r\n            x = node.width;\r\n\r\n        } else {\r\n            newBranch = poolL.get();\r\n            newBranch.getComponent('branch').init(poolL);\r\n        }\r\n        newBranch.width = (width > cc.winSize.width / 2 - 50 ? cc.winSize.width / 2 - 50 : width);\r\n\r\n        let collider = newBranch.getComponent(cc.BoxCollider);\r\n        collider.size.width = newBranch.width;\r\n        collider.size.height = newBranch.height;\r\n        if (i == 1) {\r\n            collider.offset = cc.v2(-newBranch.width / 2, newBranch.height / 2);\r\n        } else {\r\n            collider.offset = cc.v2(newBranch.width / 2, newBranch.height / 2);\r\n        }\r\n        newBranch.x = x;\r\n        newBranch.y = cc.winSize.height + cc.winSize.height / 2 * Math.random() + 30;\r\n        if (node.childrenCount > 1) {\r\n            newBranch.y = node.children[node.childrenCount - 1].y + newBranch.height + cc.winSize.height / 4 + Math.random() * (200 - this.score);\r\n        }\r\n        newBranch.zIndex = 1;\r\n        node.addChild(newBranch);\r\n    },\r\n    /**\r\n     * star the touch event\r\n     * @param node child node \r\n     */\r\n    touchStar(node) {\r\n        let lead = node.getChildByName(\"lead\");\r\n        node.on('touchstart', function () {\r\n            // cc.log(lead.getComponent('lead').speed);\r\n            lead.getComponent('lead').speed = 1\r\n        }, node, true);\r\n        node.on('touchend', function () {\r\n            lead.getComponent('lead').speed = -1\r\n        }, node, true);\r\n        node.on('touchcancel', function () {\r\n            lead.getComponent('lead').speed = -1\r\n        }, node, true);\r\n    },\r\n    /**\r\n     * End the touch event\r\n     */\r\n    offTouch(node) {\r\n        let lead = node.getChildByName(\"lead\");\r\n        node.off('touchstart');\r\n        node.off('touchend');\r\n    },\r\n    /**\r\n   * count down\r\n   */\r\n    countDown() {\r\n        let time = 5;\r\n        let self = this\r\n        self.isGameOver = true;\r\n        self.node.getChildByName('countDown').active = true;\r\n        self.node.getChildByName('countDown').getChildByName('hint').getComponent(cc.Label).string = '是否消耗茄子复活？';\r\n        self.node.getChildByName('countDown').getChildByName('time').getComponent(cc.Label).string = time;\r\n        let interval = function () {\r\n            cc.log(time);\r\n            if (time == 0) {\r\n                clearInterval(self.timmer);\r\n                self.timmer = null;\r\n                self.gameover()\r\n            } else {\r\n                time -= 1;\r\n                self.node.getChildByName('countDown').getChildByName('time').getComponent(cc.Label).string = time;\r\n            }\r\n        }\r\n        if (!CC_EDITOR) {\r\n            self.timmer = setInterval(interval, 1000);\r\n        }\r\n    },\r\n    /**\r\n     * The lives\r\n     */\r\n    keepOn() {\r\n        clearInterval(this.timmer);\r\n        let self = this;\r\n        self.timmer = null;\r\n        self.node.getChildByName('countDown').active = false;\r\n        ZMIM.gameResurrection().then((res) => {\r\n            cc.log('续命回调', res);\r\n            if (res.code == 0) {\r\n                if (res.data == 0) {\r\n                    cc.log('续命成功');\r\n                    self.isGameOver = false;\r\n                } else {\r\n                    ZMIM.gameResetResurrection();\r\n                    // console.log('茄子不够了');\r\n                    // self.gameover();\r\n                    self.node.getChildByName('pop').active = true;\r\n                }\r\n            }\r\n        }).catch((err) => {\r\n            console.log('err', err);\r\n        });\r\n    },\r\n    /**\r\n     * share\r\n     */\r\n    showShareAlert() {\r\n        let self = this;\r\n        self.node.getChildByName('pop').active = false;\r\n        ZMIM.showShareAlert().then((res) => {\r\n            self.gameover();\r\n        })\r\n    },\r\n    /**\r\n     * start game\r\n     */\r\n    gameStart() {\r\n        this.isGameOver = false;\r\n        this.score = 0;\r\n        this.node.getChildByName('score').getComponent(cc.Label).string = this.score;\r\n        this.node.getChildByName('index').active = false;\r\n    },\r\n    /**\r\n     * game over\r\n     */\r\n    gameover() {\r\n        if (this.timmer) {\r\n            clearInterval(this.timmer);\r\n            this.timmer = null;\r\n        }\r\n        this.node.getChildByName('pop').active = false;\r\n        ZMIM.gameResetResurrection();\r\n        ZMIM.saveGameScore(parseInt(this.score));\r\n        this.node.getChildByName('countDown').active = false;\r\n        this.node.getChildByName('index').active = true;\r\n        this.node.getChildByName('index').getChildByName('score').getComponent(cc.Label).string = this.node.getChildByName('score').getComponent(cc.Label).string;\r\n    },\r\n    /**\r\n     * open ranking \r\n     */\r\n    openRank() {\r\n        cc.log('node', this.node.children);\r\n        this.node.getChildByName('rankinglist').active = true;\r\n    },\r\n    /**\r\n     * close ranking \r\n     */\r\n    closeRank() {\r\n        this.node.getChildByName('rankinglist').active = false;\r\n    },\r\n    start() {\r\n        //instantiate ranking\r\n        this.node.addChild(cc.instantiate(this.ranking));\r\n    },\r\n    update(dt) {\r\n    },\r\n});\r\n\r\n\r\n","var api = require('./data.js');\r\nvar req = false;\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        title: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        content: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        rowPre: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        showType: '',\r\n    },\r\n    onLoad() {\r\n        this.showType = 'friend';\r\n        this.rowPool = new cc.NodePool();\r\n        for (let i = 0; i < 1; i++) {\r\n            let newRow = cc.instantiate(this.rowPre);\r\n            this.rowPool.put(newRow);\r\n        }\r\n    },\r\n\r\n    start() {\r\n    },\r\n    // Modify the current leaderboard list\r\n    updateList(err, type) {\r\n        //Clear the original data\r\n        api.data.page = 1;\r\n        this.recycle();\r\n        this.content.removeAllChildren()\r\n        this.content.destroyAllChildren()\r\n        this.showType = type;\r\n        this.title.getChildByName('friend').color = (type == 'friend' ? cc.Color.RED : cc.Color.WHITE);\r\n        this.title.getChildByName('team').color = (type == 'team' ? cc.Color.RED : cc.Color.WHITE);\r\n        this.title.getChildByName('world').color = (type == 'world' ? cc.Color.RED : cc.Color.WHITE);\r\n        if (!req) {\r\n            req = true;\r\n            this.getList();\r\n        }\r\n    },\r\n    /**\r\n     * creat template rank row\r\n     *@param rank 排名\r\n     *@param name 姓名\r\n     *@param score 分数\r\n     */\r\n    creatRow(rank, name, score) {\r\n        let newRow\r\n        if (this.rowPool.size() > 0) {\r\n            newRow = this.rowPool.get();\r\n        } else {\r\n            newRow = cc.instantiate(this.rowPre);\r\n        }\r\n        newRow.getChildByName('rank').getComponent(cc.Label).string = rank;\r\n        newRow.getChildByName('name').getComponent(cc.Label).string = name;\r\n        newRow.getChildByName('score').getComponent(cc.Label).string = score;\r\n        this.content.addChild(newRow);\r\n    },\r\n    /**\r\n     * Modify your own information\r\n     *@param rank 排名\r\n     *@param name 姓名\r\n     *@param score 分数\r\n     */\r\n    updataMy(rank, name, score) {\r\n        this.node.getChildByName('my').getChildByName('rank').getComponent(cc.Label).string = rank;\r\n        this.node.getChildByName('my').getChildByName('name').getComponent(cc.Label).string = name;\r\n        this.node.getChildByName('my').getChildByName('score').getComponent(cc.Label).string = score;\r\n        req = false;\r\n    },\r\n    /**\r\n     * get ranking list\r\n     */\r\n    getList() {\r\n        console.log('获取列表', this.showType, api.data.page);\r\n        api.data.page = 1;\r\n        this.count = 7;\r\n        this.node.getChildByName(\"list\").on(\"bounce-bottom\", this.getCharts, this);\r\n        // this.node.getChildByName(\"list\").off(\"bounce-bottom\");\r\n        if (this.showType == 'world') {\r\n            ZMIM.getWorldRanking(api.data.page, 7).then((res) => {\r\n                this.addRankingOnly(res);\r\n            }, this)\r\n        }\r\n        if (this.showType == 'team') {\r\n            ZMIM.getTeamRanking(api.data.page, 7).then((res) => {\r\n                this.addRankingOnly(res);\r\n            }, this)\r\n        }\r\n        if (this.showType == 'friend') {\r\n            ZMIM.getFriendRanking(api.data.page, 7).then((res) => {\r\n                this.addRankingOnly(res);\r\n            }, this)\r\n        }\r\n    },\r\n    addRankingOnly(res) {\r\n        if (res.code == 0) {\r\n            ZMIM.showTips(this.showType+' success')\r\n            res = res.data\r\n            for (let i = 0; i < res.list.length; i++) {\r\n                this.creatRow(i + 1, res.list[i].user.name, res.list[i].score)\r\n            }\r\n            cc.find('Canvas').getChildByName('rankinglist').getChildByName('list').getComponent(cc.ScrollView).scrollToTop();\r\n            this.updataMy(res.my.row, api.data.userInfo.name, res.my.score);\r\n        }\r\n    },\r\n    getCharts() {\r\n        api.data.page = api.data.page + 1\r\n        if (this.showType == 'world') {\r\n            ZMIM.getWorldRanking(api.data.page, 7).then((res) => {\r\n                this.addRanking(res);\r\n            })\r\n        }\r\n        if (this.showType == 'team') {\r\n            ZMIM.getTeamRanking(api.data.page, 7).then((res) => {\r\n                this.addRanking(res);\r\n            })\r\n        }\r\n        if (this.showType == 'friend') {\r\n            ZMIM.getFriendRanking(api.data.page, 7).then((res) => {\r\n                this.addRanking(res);\r\n            }, this)\r\n        }\r\n    },\r\n    addRanking(res) {\r\n        if (res.code == 0) {\r\n            cc.log(this.showType + ' ranking success')\r\n            res = res.data\r\n            if (res.list.length > 0) {\r\n                this.count = 7 + this.list.length;\r\n                for (let i = 0; i < res.list.length; i++) {\r\n                    self.creatRow(this.count + i, res.list[i].user.name, res.list[i].score)\r\n                }\r\n                cc.find('Canvas/rankinglist').getComponent(cc.ScrollView).scrollToTop();\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * Execute the current logic when the page is displayed\r\n     */\r\n    onEnable() {\r\n        api.data.page = 1;\r\n        this.updateList('', 'friend');\r\n    },\r\n    /**\r\n     * Recovery of the item\r\n     */\r\n    recycle() {\r\n        while (this.content.childrenCount > 0) {\r\n            this.rowPool.put(this.content.getChildByName('row'))\r\n        }\r\n    },\r\n    /**\r\n     * Executes the current logic when the page disappears\r\n     */\r\n    onDisable() {\r\n        api.data.page = 1;\r\n        this.recycle();\r\n        this.content.removeAllChildren()\r\n        this.content.destroyAllChildren()\r\n\r\n    },\r\n    closeNode() {\r\n        this.node.parent.getComponent('play').closeRank();\r\n    },\r\n    // update (dt) {},\r\n});\r\n","/*\n * @Github: 我没有\n * @Author: 李鹏帅\n * @如果有bug，那肯定不是我的锅，嘤嘤嘤\n * @since: 2019-10-11 08:56:18\n * @lastTime: 2019-10-11 16:53:05\n * @LastAuthor: Do not edit\n * @message: gamesdk\n */\n// import 'http://www.asdf.com/DCJavaScriptBridge.js';\n!\n    function (a, b) {\n        \"function\" == typeof define && (define.amd || define.cmd) ? define(function () {\n            return b(a)\n        }) : b(a, !0)\n    }(window, function (w, flag) {\n\n        function callhandler(asdf, name, data, callback) {\n            DAWebViewJavascriptBridge.callHandler(asdf, name, data, callback);\n            //    setupWebViewJavascriptBridge(function (bridge) {\n            //            bridge.callHandler(asdf, name, data, callback)\n            //    })\n        }\n        function tabel(name, callback) {\n            DAWebViewJavascriptBridge.callHandler(name, callback);\n        }\n        var ZMIM;\n        ZMIM = {\n            config: function (options) {\n                return new Promise((resolve, reject) => {\n                    callhandler('ZIMConfigPlugin', 'config', options, function (state, data) {\n                        if (state === 0) {\n                            resolve(data)\n                        } else {\n                            reject(data)\n                        }\n                    });\n                })\n            },\n            ready: function (callback) {\n                if (w.DAWebViewJavascriptBridge) {\n                    DAWebViewJavascriptBridge.init(function (message, responseCallback) {\n                        var data = { 'Javascript Responds': 'Wee!' };\n                        responseCallback(data);\n                    });\n                    callback();\n                } else {\n                    document.addEventListener('WebViewJavascriptBridgeReady', function () {\n                        DAWebViewJavascriptBridge.init(function (message, responseCallback) {\n                            var data = { 'Javascript Responds': 'Wee!' };\n                            responseCallback(data);\n                        });\n                        callback();\n                    }, false)\n                }\n            },\n            error: function (res) {\n\n            },\n            request: function (url, method, data) {\n                return new Promise((resolve, reject) => {\n                    const dataJson = {}\n                    dataJson.url = url;\n                    dataJson.method = method;\n                    dataJson.data = data;\n                    callhandler('ZIMRequestPlugin', 'request', dataJson, function (state, data) {\n                        cc.log('state', state);\n                        cc.log('data', data);\n                        if (state === 0) {\n                            resolve(data)\n                        } else {\n                            reject(data)\n                        }\n                    });\n                })\n            },\n            getUserInfo: function () {\n                return new Promise((resolve, reject) => {\n                    callhandler('ZIMUserInfoPlugin', 'getUserInfo', function (state, data) {\n                        // console.log('state', state, data);\n                        if (state === 0) {\n                            resolve(data)\n                        } else {\n                            reject(data)\n                        }\n                    });\n                })\n            },\n            showShareAlert: function () {\n                return new Promise((resolve, reject) => {\n                    callhandler('ZIMShareAlertPlugin', 'showShareAlertView', function (state, data) {\n                        // console.log('state', state, data);\n                        if (state === 0) {\n                            resolve(data)\n                        } else {\n                            reject(data)\n                        }\n                    });\n                })\n            },\n            gameResurrection: function (id) {\n                return new Promise((resolve, reject) => {\n                    callhandler('ZIMGoldPlugin', 'gameResurrection', { 'id': id }, function (state, data) {\n                        if (state === 0) {\n                            resolve(data)\n                        } else {\n                            reject(data)\n                        }\n                    });\n                })\n            },\n            gameResetResurrection: function () {\n                return new Promise((resolve, reject) => {\n                    callhandler('ZIMGoldPlugin', 'gameResetResurrection', function (state, data) {\n                        if (state === 0) {\n                            resolve(data)\n                        } else {\n                            reject(data)\n                        }\n                    });\n                })\n            },\n            getWorldRanking: function (page, count) {\n                return new Promise((resolve, reject) => {\n                    callhandler('ZIMRankingPlugin', 'getWorldRanking', { 'page': page, 'count': count }, function (state, data) {\n                        // console.log('state', state, data);\n                        if (state === 0) {\n                            resolve(data)\n                        } else {\n                            reject(data)\n                        }\n                    });\n                })\n            },\n            getTeamRanking: function (page, count) {\n                return new Promise((resolve, reject) => {\n                    callhandler('ZIMRankingPlugin', 'getTeamRanking', { 'page': page, 'count': count }, function (state, data) {\n                        console.log('state', state, data);\n                        if (state === 0) {\n                            resolve(data)\n                        } else {\n                            reject(data)\n                        }\n                    });\n                })\n            },\n            getFriendRanking: function (page, count) {\n                return new Promise((resolve, reject) => {\n                    callhandler('ZIMRankingPlugin', 'getFriendRanking', { 'page': page, 'count': count }, function (state, data) {\n                        // console.log('state', state, data);\n                        if (state === 0) {\n                            resolve(data)\n                        } else {\n                            reject(data)\n                        }\n                    });\n                })\n            },\n            saveGameScore: function (score) {\n                return new Promise((resolve, reject) => {\n                    callhandler('ZIMRankingPlugin', 'saveGameScore', { 'score': score }, function (state, data) {\n                        // console.log('state', state, data);\n                        if (state === 0) {\n                            resolve(data)\n                        } else {\n                            reject(data)\n                        }\n                    });\n                })\n            },\n            showTips: function (message) {\n                return new Promise((resolve, reject) => {\n                    callhandler('ZIMShareAlertPlugin', 'showTips', { 'message': message }, function (state, data) {\n                        // console.log('state', state, data);\n                        if (state === 0) {\n                            resolve(data)\n                        } else {\n                            reject(data)\n                        }\n                    });\n                })\n            },\n            showJOJOAlert: function (message) {\n                return new Promise((resolve, reject) => {\n                    callhandler('ZIMShareAlertPlugin', 'showJOJOAlert', { 'message': message }, function (state, data) {\n                        // console.log('state', state, data);\n                        if (state === 0) {\n                            resolve(data)\n                        } else {\n                            reject(data)\n                        }\n                    });\n                })\n            },\n            currentScreenState: function (res) {\n                return new Promise((resolve, reject) => {\n                    tabel('currentScreenState', function (state, data) {\n                        // console.log('state', state, data);\n                        resolve(data)\n\n                    });\n                })\n            }\n        },\n            flag && (w.zmim = w.ZMIM = ZMIM),\n            ZMIM\n    });\n"],"sourceRoot":"/source/","file":"project.js"}